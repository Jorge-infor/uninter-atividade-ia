"""
ImplementaÃ§Ã£o do NeurÃ´nio Treinado (Perceptron de 6 entradas)

Este programa simula o comportamento de um neurÃ´nio treinado
em um microcontrolador para controle de um forno industrial.

Objetivo:
    - Receber 6 valores de sensores (entradas).
    - Calcular a soma ponderada utilizando os pesos sinÃ¡pticos treinados.
    - Aplicar a funÃ§Ã£o de ativaÃ§Ã£o degrau binÃ¡ria:
        Se soma >= 0 â†’ saÃ­da = 1  (manter forno ativo)
        Se soma < 0 â†’ saÃ­da = -1 (parar e desligar forno)
    - Imprimir a decisÃ£o simulando o comando ao atuador.
"""

from typing import List


def ativacao(soma: float) -> int:
    """
    FunÃ§Ã£o de ativaÃ§Ã£o degrau binÃ¡ria.

    Args:
        soma (float): Soma ponderada das entradas com seus pesos.

    Returns:
        int: 1 para manter o forno ativo, -1 para desligar.
    """
    return 1 if soma >= 0 else -1


def neuronio(entradas: List[float]) -> int:
    """
    Executa o cÃ¡lculo da saÃ­da do neurÃ´nio com base nas entradas.

    Args:
        entradas (List[float]): Lista com os 6 valores dos sensores.

    Returns:
        int: SaÃ­da do neurÃ´nio (1 ou -1).
    """

    # === INSIRA AQUI OS PESOS FINAIS DO TREINAMENTO ===
    # Exemplo de pesos fictÃ­cios (substitua pelos seus valores reais)
    pesos = [-0.03, -0.03, 0.15, 0.17, -0.11, 0.04]
    bias = -0.75  # Exemplo de bias final

    # Calcula soma ponderada das entradas
    soma_total = sum(p * e for p, e in zip(pesos, entradas)) + bias

    # Aplica funÃ§Ã£o de ativaÃ§Ã£o
    saida = ativacao(soma_total)

    return saida


def main() -> None:
    """
    FunÃ§Ã£o principal que simula a leitura dos sensores e
    a decisÃ£o do neurÃ´nio.
    """
    print("=== SimulaÃ§Ã£o do NeurÃ´nio no Forno Industrial ===")
    print("Insira os valores dos 6 sensores (separados por espaÃ§o):")

    try:
        # LÃª entradas do usuÃ¡rio
        entradas = list(map(float, input("Sensores: ").strip().split()))

        if len(entradas) != 6:
            print("Erro: Ã‰ necessÃ¡rio inserir exatamente 6 valores de sensores.")
            return

        # Calcula a saÃ­da do neurÃ´nio
        saida = neuronio(entradas)

        # Exibe o resultado (simulaÃ§Ã£o do atuador)
        if saida == 1:
            print("\nSaÃ­da do neurÃ´nio: 1 â†’ Manter o forno ATIVO ğŸ”¥")
        else:
            print("\nSaÃ­da do neurÃ´nio: -1 â†’ Desligar forno e parar esteiras ğŸ§Š")

    except ValueError:
        print("Erro: Insira apenas nÃºmeros vÃ¡lidos separados por espaÃ§o.")


if __name__ == "__main__":
    main()
